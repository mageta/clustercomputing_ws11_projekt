Cluster-Computing-Projekt ws11

Description of the Task can be found in 'doc/projektaufgabe.pdf'.
The documentation (main algorithm ideas, run-time-analysis and remarks) can be
found in 'doc/doku.pdf' (written in german).

To build the project just issue 'make' in the main directory. This should build
everything you need. The 'Makefile' (and 'helper/Makefile') expects a
mpi-compiler located in /usr/local/bin ('/usr/local/bin/mpicc'). If your
mpi-compiler is located somewhere else, please change the 'CC'-variable at the
top of the two makefiles, or create a symbolic link
(e.g. ln -s /usr/bin/mpicc /usr/local/bin/mpicc).

If you want to debug the programm, please change the Makefiles and comment out
the second 'CCFLAGS'-line plus uncomment the first one. This will issue the
compiler to not optimize the code, not to omit frame pointers and not to destroy
debugging-symbols. And do a >make clean< before rebuilding it with >make<.

executables:

./find_components <file>
	- main programm, should be run with mpi_run
	- expects a file as argument
		- the file should contain the matrix to be analysed; format:
			i/j . . . . . . . . . . . . . . . . n (j in n)
			. a11, a12, . . . . . . . . . . a1n .
			. a21                           .   .
			. .                             .   .
			. .                             .   .
			. .                             .   .
			. .                             .   .
			. .                             .   .
			. .                             .   .
			. am1, am2, . . . . . . . . . . amn .
			m . . . . . . . . . . . . . . . . . m/n
			(i in m)

./pixelpattern <m> <n>
	- matrix-generator (no mpi)
	- can be used to generate input for ./find_components
	- to do so, issue it as follows:
		./pixelpattern 20 20 2>pattern.txt

		-> pat.txt will contain the matrix

./test_script
	- tests if find_components finds all components that pixelpattern
	  created
	- to do this, it redirects the component-list printed by both,
	  pixelpattern and find_components, into a new file. Then it edits
	  these files to only contain the sizes of the components and sorts
	  them. At last it uses "diff" to check if there is any difference
	  between these two.
	  This CAN lead to false-positives, but it a good heuristic.

	example:

	./pixelpattern 20 20 2>pattern.txt 1>.comp.1.txt
	grep '^[0-9]' .comp.1.txt > .comp.1.txt.tmp
	mv .comp.1.txt.tmp .comp.1.txt
	sort -fn .comp.1.txt > .comp.1.txt.tmp
	mv .comp.1.txt.tmp .comp.1.txt
	# .comp.1.txt contains all components-sizes of pattern.txt (sorted)

	mpirun -np 2 ./find_components pattern.txt 2>/dev/null 1>.comp.2.txt
	cut -d ':' -f3 .comp.2.txt | sed 's/[ ]*//' > .comp.2.txt.tmp
	mv .comp.2.txt.tmp .comp.2.txt
	sort -n .comp.2.txt > .comp.2.txt.tmp
	mv .comp.2.txt.tmp .comp.2.txt
	# .comp.2.txt contains all components-sizes found by ./find_components
	# (sorted)

	diff .comp.1.txt .comp.2.txt
